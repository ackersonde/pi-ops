name: Deploy Infra scripts to PI

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-22.04
    env:
      LOG_FILES: "/var/log/update_domain_records.log /var/log/unseal_vault.log /var/log/gen_new_deploy_keys.log /var/log/fritz-cert-upload.log /var/log/photoprism-backup.log /var/log/photoprism-import.log /var/log/update_github_secrets.log"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Build and deploy application
        run: |
          #export CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN=$(echo ${{ secrets.ORG_DIGITALOCEAN_DROPLET_PROXY_TOKEN }} | base64 -d)
          #export CTX_DIGITALOCEAN_FIREWALL=$(echo ${{ secrets.ORG_DIGITALOCEAN_FIREWALL }} | base64 -d)
          export HETZNER_API_TOKEN=$(echo ${{ secrets.ORG_HETZNER_CLOUD_API_TOKEN }} | base64 -d)

          git clone https://github.com/ackersonde/hetzner_home.git
          cd hetzner_home
          go mod tidy
          go build hetzner.go
          cd ../

          export FRITZ_BOX_USER=$(echo ${{ secrets.ORG_FRITZ_BOX_USER }} | base64 -d)
          export FRITZ_BOX_PASS=$(echo ${{ secrets.ORG_FRITZ_BOX_PASS }} | base64 -d)
          export FRITZ_BOX_HOST=$(echo ${{ secrets.ORG_FRITZ_BOX_HOST }} | base64 -d)
          sed -i -e "s@{{FRITZ_BOX_USER}}@$FRITZ_BOX_USER@" scripts/fritzbox/fritz-cert-upload.sh
          sed -i -e "s@{{FRITZ_BOX_PASS}}@$FRITZ_BOX_PASS@" scripts/fritzbox/fritz-cert-upload.sh

          sed -i -e "s@{{FRITZ_BOX_HOST}}@$FRITZ_BOX_HOST@" scripts/fritzbox/fritzBoxShellConfig.sh
          sed -i -e "s@{{FRITZ_BOX_USER}}@$FRITZ_BOX_USER@" scripts/fritzbox/fritzBoxShellConfig.sh
          sed -i -e "s@{{FRITZ_BOX_PASS}}@$FRITZ_BOX_PASS@" scripts/fritzbox/fritzBoxShellConfig.sh

          export BUILD_HOST=$(echo ${{ secrets.ORG_BUILD_HOST }} | base64 -d)
          export MASTER_HOST=$(echo ${{ secrets.ORG_MASTER_HOST }} | base64 -d)
          export SLAVE_HOST=$(echo ${{ secrets.ORG_SLAVE_HOST }} | base64 -d)
          sed -i -e "s/{{BUILD_HOST}}/$BUILD_HOST/" scripts/fritzbox/update_domain_records.sh
          sed -i -e "s/{{MASTER_HOST}}/$MASTER_HOST/" scripts/fritzbox/update_domain_records.sh
          sed -i -e "s/{{SLAVE_HOST}}/$SLAVE_HOST/" scripts/fritzbox/update_domain_records.sh

          export CACERT_KEY_PASS=$(echo ${{ secrets.ORG_CACERT_KEY_PASS }} | base64 -d)
          export GITHUB_APP_CLIENT_ID=$(echo ${{ secrets.ORG_GITHUB_APP_CLIENT_ID }} | base64 -d)
          export GITHUB_INSTALL_ID=$(echo ${{ secrets.ORG_GITHUB_INSTALL_ID }} | base64 -d)
          export GITHUB_SECRETS_PK_PEM_FILE=$(echo ${{ secrets.ORG_GITHUB_SECRETS_PK_PEM_FILE }} | base64 -d)
          export SLACK_NOTIFICATIONS_TOKEN=$(echo ${{ secrets.ORG_SLACK_NOTIFICATIONS_TOKEN }} | base64 -d)
          sed -i -e "s@{{CACERT_KEY_PASS}}@$CACERT_KEY_PASS@" scripts/github_deploy_params
          sed -i -e "s@{{GITHUB_APP_CLIENT_ID}}@$GITHUB_APP_CLIENT_ID@" scripts/github_deploy_params
          sed -i -e "s@{{GITHUB_INSTALL_ID}}@$GITHUB_INSTALL_ID@" scripts/github_deploy_params
          sed -i -e "s@{{GITHUB_SECRETS_PK_PEM_FILE}}@$GITHUB_SECRETS_PK_PEM_FILE@" scripts/github_deploy_params
          sed -i -e "s@{{SLACK_NOTIFICATIONS_TOKEN}}@$SLACK_NOTIFICATIONS_TOKEN@" scripts/github_deploy_params
          sed -i -e "s@{{DO_TOKEN}}@$CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN@" scripts/github_deploy_params
          chmod 600 scripts/github_deploy_params

          export ORG_VAULT_API_ENDPOINT_D64=$(echo ${{ secrets.ORG_VAULT_API_ENDPOINT }} | base64 -d)
          export ORG_VAULT_READ_APPROLE_ID_D64=$(echo ${{ secrets.ORG_VAULT_READ_APPROLE_ID }} | base64 -d)
          export ORG_VAULT_READ_SECRET_ID_D64=$(echo ${{ secrets.ORG_VAULT_READ_SECRET_ID }} | base64 -d)
          export ORG_VAULT_WRITE_APPROLE_ID_D64=$(echo ${{ secrets.ORG_VAULT_WRITE_APPROLE_ID }} | base64 -d)
          export ORG_VAULT_WRITE_SECRET_ID_D64=$(echo ${{ secrets.ORG_VAULT_WRITE_SECRET_ID }} | base64 -d)
          sed -i -e "s@{{ORG_VAULT_API_ENDPOINT}}@$ORG_VAULT_API_ENDPOINT_D64@" scripts/vault_update_github_params
          sed -i -e "s@{{ORG_VAULT_READ_APPROLE_ID}}@$ORG_VAULT_READ_APPROLE_ID_D64@" scripts/vault_update_github_params
          sed -i -e "s@{{ORG_VAULT_READ_SECRET_ID}}@$ORG_VAULT_READ_SECRET_ID_D64@" scripts/vault_update_github_params
          sed -i -e "s@{{ORG_VAULT_WRITE_APPROLE_ID}}@$ORG_VAULT_WRITE_APPROLE_ID_D64@" scripts/vault_update_github_params
          sed -i -e "s@{{ORG_VAULT_WRITE_SECRET_ID}}@$ORG_VAULT_WRITE_SECRET_ID_D64@" scripts/vault_update_github_params
          chmod 600 scripts/vault_update_github_params

          echo "${{ secrets.ORG_GITHUB_SECRETS_PK_PEM }}" | base64 -d > scripts/$GITHUB_SECRETS_PK_PEM_FILE
          chmod 600 scripts/$GITHUB_SECRETS_PK_PEM_FILE
          echo "${{ secrets.ORG_CA_KEY }}" | base64 -d > scripts/ca_key
          chmod 600 scripts/ca_key

          export IPV6_MASTER_HOME=$(echo ${{ secrets.ORG_IPV6_MASTER_HOME }} | base64 -d)
          export IPV6_SLAVE_HOME=$(echo ${{ secrets.ORG_IPV6_SLAVE_HOME }} | base64 -d)
          cat <<DEPLOY_EOF >deploy-pi-ops.sh
          #!/usr/bin/bash
          scp -o StrictHostKeyChecking=no scripts/crontab.txt ubuntu@[$IPV6_MASTER_HOME]:/tmp/
          ssh ubuntu@$IPV6_MASTER_HOME '\
            crontab /tmp/crontab.txt && \
            sudo apt-get install wakeonlan nmap && \
            mkdir my-ca vault || true && \
            sudo touch -m $LOG_FILES && sudo chown ubuntu:ubuntu $LOG_FILES'

          scp scripts/fritzbox/fritz-cert-upload.sh scripts/fritzbox/traefik-certs-dumper ubuntu@[$IPV6_MASTER_HOME]:~/traefik/
          scp scripts/fritzbox/fritzBoxShell* scripts/fritzbox/update_domain_records.sh ubuntu@[$IPV6_MASTER_HOME]:~/
          scp scripts/*.sh scripts/secrets/*.py scripts/secrets/requirements.txt scripts/$GITHUB_SECRETS_PK_PEM_FILE scripts/ca_key ubuntu@[$IPV6_MASTER_HOME]:~/my-ca/
          scp scripts/github_deploy_params scripts/vault_update_github_params ubuntu@[$IPV6_MASTER_HOME]:~/.ssh/
          scp scripts/secrets/*.sh ubuntu@[$IPV6_MASTER_HOME]:~/vault/

          scp -o StrictHostKeyChecking=no scripts/secrets/logrotate_vault.conf ubuntu@[$IPV6_SLAVE_HOME]:/tmp/
          ssh ubuntu@$IPV6_SLAVE_HOME '\
            sudo mv /tmp/logrotate_vault.conf /etc/logrotate.d/ && sudo chown root:root /etc/logrotate.d/logrotate_vault.conf &&
            mkdir -p /mnt/usb4TB/backups/vault-secrets || true'
          DEPLOY_EOF
          chmod u+x deploy-pi-ops.sh

          mkdir ~/.ssh
          echo "${{ secrets.HETZNER_SSH_PRIVKEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          ./hetzner_home/hetzner -fn=firewallSSH -tag=homepage -ip=$public_ip_address

          scp -o StrictHostKeyChecking=no -r scripts deploy-pi-ops.sh root@ackerson.de:~/
          ssh root@ackerson.de ./deploy-pi-ops.sh
          ssh root@ackerson.de rm -Rf scripts/ deploy-pi-ops.sh

          rm -Rf .ssh/ scripts/ deploy-pi-ops.sh
          ./hetzner_home/hetzner -fn=cleanupDeploy -tag=homepage

          curl -s -o /dev/null -X POST -d "token=$SLACK_NOTIFICATIONS_TOKEN" -d "channel=C092UE0H4" \
            -d "text=<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
